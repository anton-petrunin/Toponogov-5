# -*- coding: utf-8 -*-
"""triples.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1l17UzCct-UhVoFmLk3HFxmCmU2umcWxM
"""

from itertools import combinations
from itertools import permutations

def AllTriples(string):
  L=[]
  for element in combinations(string,3):
      L.append(list(element))
      L.append([element[1],element[2],element[0]])
      L.append([element[2],element[0],element[1]])
  return L

def AllPairs(string):
  L=[]
  for element in combinations(string,2):
      L.append(list(element))
  return L

Total={0,1,2,3,4}
Triples=AllTriples(list(Total))
Pairs=AllPairs(list(Total))

print(len(Triples))
print(len(Pairs))

def Check(a,b):
  cap=set(a).intersection(set(b))
  if len(cap)==1:
    return True
  elif len(cap)==3:
    return False
  elif (a[1]==b[1]):
    return False
  elif (a[1] in cap) and (b[1] in cap):
    return True
  elif (a[1] not in cap) and (b[1] not in cap):
    return True
  else:
    return False

def BigCheck(triple,configuration):
  if all(Check(triple,b) for b in configuration):
    return True
  else:
    return False

#print(Check([1,2,3],[2,3,4]))
#print(BigCheck([0,2,4],[[0,1,2],[1,2,3],[2,3,4],[3,4,0],[4,0,1]]))

def SameTriples(a,b):
  if (a==b):
    return True
  elif (a[0]==b[2]) and (a[1]==b[1]) and (a[2]==b[0]):
    return True
  else:
    return False
  
#print(SameTriples([1,2,3],[3,2,1]))

def SameConfiguration(a,b):
  if (len(a)==len(b)):
    if not all([SameTriples(x,y) for x,y in zip(a,b)]):
     return False
    else:
     return True
  else:
    return False

#print(SameConfiguration([[1,2,3],[2,3,1]],[[3,2,1],[2,3,1]]))

def Signature(configuration):
  L=[]
  for i in Total:
    a=0
    b=0
    for triple in configuration:
      if i==triple[1]:
        a=a+1
      elif i==triple[0] or i==triple[2]:
        b=b+1
    L.append((a,b))
  for j in Pairs:
    a=0
    b=0
    c=0
    for triple in configuration:
      if j[0]==triple[1] or j[1]==triple[1]:
        a=a+1
      elif j[0]==triple[0] and j[1]==triple[2]:
        b=b+1
      elif (j[0]==triple[0] or j[1]==triple[2]) and (j[0]==triple[1] or j[1]==triple[1]):
        c=c+1
    L.append((a,b,c))
  return sorted(L)

print(Signature([[1,2,3],[2,3,4],[3,4,0]]))

def CongruentConfiguration(a,b):
  n=len(a)
  if (n!=len(b)):
    return False
  else:
    for p in list(permutations(range(n))):
      for q in list(permutations(range(len(Total)))):
        tmp=[[q[i] for i in j] for j in a]
        if SameConfiguration([tmp[p[i]] for i in range(n)],b):
          return True
    return False

print(CongruentConfiguration([[0, 1, 2], [1, 2, 3], [2, 3, 4], [3, 4, 0], [4, 0, 1]], [[0, 1, 2], [1, 2, 3], [2, 3, 4], [4, 0, 1], [3, 4, 0]]))

def New(newconfiguration,bigconfiguration):
  smallconfiguration=[]
  newsignature=Signature(newconfiguration)
  for configuration in bigconfiguration:
    if Signature(configuration)==newsignature:
      smallconfiguration.append(configuration)
  if all([(not CongruentConfiguration(configuration,newconfiguration)) for  configuration in smallconfiguration]):
      return True
  else:
      return False

def BigClean(bigconfiguration):
  L=[]
  n=len(bigconfiguration)
  for i in range(n):
    if all([(not CongruentConfiguration(bigconfiguration[i],bigconfiguration[j])) for j in range(i+1,n)]):
      L.append(bigconfiguration[i])
  return L
  
#print(New([[1,2,3],[1,2,4]],[[[4,2,1],[3,2,1]],[[1,4,3],[1,2,4]]]))
#print(CongruentConfiguration([[1,2,3],[1,2,4]],[[4,2,1],[3,2,1]]))
#print(BigClean([[[1,2,3],[1,2,4]],[[1,3,4],[2,3,0]]]))

def PairInConfiguration(pair,configuration):
  for triple in configuration:
    if set(pair)<set(triple):
     return True
  return False
 
#print(PairInConfiguration([2,1],[[1,3,2],[1,4,3]]))
#print(PairInConfiguration([5,0],[[0,1,2],[1,2,3],[2,3,4],[3,4,0],[4,0,1]]))
#print(set([0,3])<set([3,4,0]))

def CompleteConfiguration(configuration):
  if len(configuration)<(len(Pairs)-1)/2:
    return False
  elif all([PairInConfiguration(pair,configuration) for pair in Pairs]):
    return True
  else:
    return False

#print(CompleteConfiguration([[0,1,2],[1,2,3],[2,3,4],[3,4,0],[4,0,1]]))

def Expand(configuration):
  L=[]
  for triple in Triples:
    if BigCheck(triple,configuration):
      L.append(configuration+[triple])
  return L

#W=[[[0,1,2],[1,2,3],[5,1,4]]]
W=[[]]
WW=[]

while W!=[]:
  print("======== {}".format(len(W)))
  thelast=W[0]
  W.pop(0)
  for configuration in Expand(thelast):
    if New(configuration,W):
      W.append(configuration)
      print("new {}".format(len(configuration)))
    else:
      print("old {}".format(len(configuration)))
  if CompleteConfiguration(thelast) and New(thelast,WW):
    WW.append(thelast)
    print(thelast)
  
#for conf in WW:
#  print(conf)

